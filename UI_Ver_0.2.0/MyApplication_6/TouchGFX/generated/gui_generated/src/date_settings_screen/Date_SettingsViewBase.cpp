/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/date_settings_screen/Date_SettingsViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include <images/BitmapDatabase.hpp>

Date_SettingsViewBase::Date_SettingsViewBase() :
    buttonCallback(this, &Date_SettingsViewBase::buttonCallbackHandler)
{
    __background.setPosition(0, 0, 240, 320);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    box1.setPosition(0, 0, 240, 320);
    box1.setColor(touchgfx::Color::getColorFromRGB(43, 43, 43));
    add(box1);

    textArea1.setXY(20, 15);
    textArea1.setColor(touchgfx::Color::getColorFromRGB(128, 128, 128));
    textArea1.setLinespacing(0);
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_DF27));
    add(textArea1);

    Menu_Button.setXY(197, 7);
    Menu_Button.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_MICRO_OUTLINE_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_MICRO_OUTLINE_PRESSED_ID));
    Menu_Button.setLabelText(touchgfx::TypedText(T___SINGLEUSE_LIZW));
    Menu_Button.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    Menu_Button.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
    Menu_Button.setAction(buttonCallback);
    add(Menu_Button);

    Submit_Date.setXY(65, 260);
    Submit_Date.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_TINY_ROUNDED_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_TINY_ROUNDED_DISABLED_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_DONE_50_50_E8F6FB_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_DONE_50_50_E8F6FB_SVG_ID));
    Submit_Date.setIconXY(30, 0);
    Submit_Date.setAction(buttonCallback);
    add(Submit_Date);

    Day_Val_Up.setXY(29, 160);
    Day_Val_Up.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_MICRO_FILL_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_MICRO_FILL_ACTIVE_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_HARDWARE_KEYBOARD_ARROW_UP_50_50_E8F6FB_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_HARDWARE_KEYBOARD_ARROW_UP_50_50_E8F6FB_SVG_ID));
    Day_Val_Up.setIconXY(-7, -7);
    Day_Val_Up.setAction(buttonCallback);
    add(Day_Val_Up);

    Month_Val_Up.setXY(107, 160);
    Month_Val_Up.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_MICRO_FILL_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_MICRO_FILL_ACTIVE_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_HARDWARE_KEYBOARD_ARROW_UP_50_50_E8F6FB_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_DONE_50_50_E8F6FB_SVG_ID));
    Month_Val_Up.setIconXY(-7, -7);
    Month_Val_Up.setAction(buttonCallback);
    add(Month_Val_Up);

    Day_Val_Down.setXY(29, 210);
    Day_Val_Down.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_MICRO_FILL_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_MICRO_FILL_ACTIVE_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_HARDWARE_KEYBOARD_ARROW_DOWN_50_50_E8F6FB_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_HARDWARE_KEYBOARD_ARROW_DOWN_50_50_E8F6FB_SVG_ID));
    Day_Val_Down.setIconXY(-7, -7);
    Day_Val_Down.setAction(buttonCallback);
    add(Day_Val_Down);

    Month_Val_Down.setXY(107, 210);
    Month_Val_Down.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_MICRO_FILL_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_MICRO_FILL_ACTIVE_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_HARDWARE_KEYBOARD_ARROW_DOWN_50_50_E8F6FB_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_HARDWARE_KEYBOARD_ARROW_DOWN_50_50_E8F6FB_SVG_ID));
    Month_Val_Down.setIconXY(-7, -7);
    Month_Val_Down.setAction(buttonCallback);
    add(Month_Val_Down);

    Year_Val_Up.setXY(175, 160);
    Year_Val_Up.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_MICRO_FILL_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_MICRO_FILL_ACTIVE_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_HARDWARE_KEYBOARD_ARROW_UP_50_50_E8F6FB_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_DONE_50_50_E8F6FB_SVG_ID));
    Year_Val_Up.setIconXY(-7, -7);
    Year_Val_Up.setAction(buttonCallback);
    add(Year_Val_Up);

    Year_Val_Down.setXY(175, 210);
    Year_Val_Down.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_MICRO_FILL_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_MICRO_FILL_ACTIVE_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_HARDWARE_KEYBOARD_ARROW_DOWN_50_50_E8F6FB_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_HARDWARE_KEYBOARD_ARROW_DOWN_50_50_E8F6FB_SVG_ID));
    Year_Val_Down.setIconXY(-7, -7);
    Year_Val_Down.setAction(buttonCallback);
    add(Year_Val_Down);

    Hour_Text.setXY(37, 86);
    Hour_Text.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    Hour_Text.setLinespacing(0);
    Hour_Text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_4FMU));
    add(Hour_Text);

    Days_Val.setXY(29, 126);
    Days_Val.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    Days_Val.setLinespacing(0);
    Unicode::snprintf(Days_ValBuffer, DAYS_VAL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_26BI).getText());
    Days_Val.setWildcard(Days_ValBuffer);
    Days_Val.resizeToCurrentText();
    Days_Val.setTypedText(touchgfx::TypedText(T___SINGLEUSE_XY79));
    add(Days_Val);

    current_Days_Val.setXY(29, 54);
    current_Days_Val.setColor(touchgfx::Color::getColorFromRGB(41, 115, 120));
    current_Days_Val.setLinespacing(0);
    Unicode::snprintf(current_Days_ValBuffer, CURRENT_DAYS_VAL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_PM6O).getText());
    current_Days_Val.setWildcard(current_Days_ValBuffer);
    current_Days_Val.resizeToCurrentText();
    current_Days_Val.setTypedText(touchgfx::TypedText(T___SINGLEUSE_IAAU));
    add(current_Days_Val);

    Months_Text.setXY(112, 86);
    Months_Text.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    Months_Text.setLinespacing(0);
    Months_Text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_NJNH));
    add(Months_Text);

    Months_Val.setXY(112, 126);
    Months_Val.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    Months_Val.setLinespacing(0);
    Unicode::snprintf(Months_ValBuffer, MONTHS_VAL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_GAM9).getText());
    Months_Val.setWildcard(Months_ValBuffer);
    Months_Val.resizeToCurrentText();
    Months_Val.setTypedText(touchgfx::TypedText(T___SINGLEUSE_K18O));
    add(Months_Val);

    current_Months_Val.setXY(112, 54);
    current_Months_Val.setColor(touchgfx::Color::getColorFromRGB(41, 115, 120));
    current_Months_Val.setLinespacing(0);
    Unicode::snprintf(current_Months_ValBuffer, CURRENT_MONTHS_VAL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_YWJI).getText());
    current_Months_Val.setWildcard(current_Months_ValBuffer);
    current_Months_Val.resizeToCurrentText();
    current_Months_Val.setTypedText(touchgfx::TypedText(T___SINGLEUSE_LUJQ));
    add(current_Months_Val);

    YearText.setXY(186, 86);
    YearText.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    YearText.setLinespacing(0);
    YearText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_3JAI));
    add(YearText);

    Year_Val.setXY(162, 126);
    Year_Val.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    Year_Val.setLinespacing(0);
    Unicode::snprintf(Year_ValBuffer, YEAR_VAL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_55BJ).getText());
    Year_Val.setWildcard(Year_ValBuffer);
    Year_Val.resizeToCurrentText();
    Year_Val.setTypedText(touchgfx::TypedText(T___SINGLEUSE_UP7D));
    add(Year_Val);

    current_Year_Val.setXY(162, 54);
    current_Year_Val.setColor(touchgfx::Color::getColorFromRGB(41, 115, 120));
    current_Year_Val.setLinespacing(0);
    Unicode::snprintf(current_Year_ValBuffer, CURRENT_YEAR_VAL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_ULJ6).getText());
    current_Year_Val.setWildcard(current_Year_ValBuffer);
    current_Year_Val.resizeToCurrentText();
    current_Year_Val.setTypedText(touchgfx::TypedText(T___SINGLEUSE_7YMK));
    add(current_Year_Val);

    Brightness_level.setPosition(0, 0, 240, 320);
    Brightness_level.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    Brightness_level.setAlpha(0);
    add(Brightness_level);
}

Date_SettingsViewBase::~Date_SettingsViewBase()
{

}

void Date_SettingsViewBase::setupScreen()
{

}

void Date_SettingsViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &Menu_Button)
    {
        //Interaction1
        //When Menu_Button clicked change screen to MenuDropdown_1
        //Go to MenuDropdown_1 with no screen transition
        application().gotoMenuDropdown_1ScreenNoTransition();
    }
    if (&src == &Day_Val_Up)
    {
        //Days_Val_Up
        //When Day_Val_Up clicked call virtual function
        //Call Days_Val_Up
        Days_Val_Up();
    }
    if (&src == &Day_Val_Down)
    {
        //Days_Val_Down
        //When Day_Val_Down clicked call virtual function
        //Call Days_Val_Down
        Days_Val_Down();
    }
    if (&src == &Month_Val_Up)
    {
        //Months_Val_Up
        //When Month_Val_Up clicked call virtual function
        //Call Months_Val_Up
        Months_Val_Up();
    }
    if (&src == &Month_Val_Down)
    {
        //Months_Val_Down
        //When Month_Val_Down clicked call virtual function
        //Call Months_Val_Down
        Months_Val_Down();
    }
    if (&src == &Year_Val_Up)
    {
        //Years_Val_Up
        //When Year_Val_Up clicked call virtual function
        //Call Years_Val_Up
        Years_Val_Up();
    }
    if (&src == &Year_Val_Down)
    {
        //Years_Val_Down
        //When Year_Val_Down clicked call virtual function
        //Call Years_Val_Down
        Years_Val_Down();
    }
    if (&src == &Submit_Date)
    {
        //Update_Date
        //When Submit_Date clicked call virtual function
        //Call Update_Date
        Update_Date();
    }
}
