/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef DEFAULTVIEWVIEWBASE_HPP
#define DEFAULTVIEWVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/defaultview_screen/DefaultViewPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/ButtonWithLabel.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/containers/SwipeContainer.hpp>
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/containers/progress_indicators/CircleProgress.hpp>
#include <touchgfx/widgets/canvas/PainterRGB565.hpp>
#include <touchgfx/widgets/ButtonWithIcon.hpp>
#include <touchgfx/containers/clock/DigitalClock.hpp>

class DefaultViewViewBase : public touchgfx::View<DefaultViewPresenter>
{
public:
    DefaultViewViewBase();
    virtual ~DefaultViewViewBase();
    virtual void setupScreen();
    virtual void handleTickEvent();

    /*
     * Virtual Action Handlers
     */
    virtual void function1()
    {
        // Override and implement this function in DefaultView
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Box box1;
    touchgfx::ButtonWithLabel Menu_Button;
    touchgfx::TextArea textArea1;
    touchgfx::SwipeContainer SwipeContainer;
    touchgfx::Container SwipeContainerHumidity;
    touchgfx::TextArea Humidity_Text;
    touchgfx::TextAreaWithOneWildcard Humidity_Val;
    touchgfx::CircleProgress HumidityCirc_Val;
    touchgfx::PainterRGB565 HumidityCirc_ValPainter;
    touchgfx::ButtonWithIcon Statistics_Button_Humidity;
    touchgfx::Container SwipeContainerCarbon;
    touchgfx::TextArea Carbon_Text;
    touchgfx::TextAreaWithOneWildcard Carbon_Val;
    touchgfx::CircleProgress CarbonCirc_Val;
    touchgfx::PainterRGB565 CarbonCirc_ValPainter;
    touchgfx::ButtonWithIcon Statistics_Button_Carbon;
    touchgfx::Container SwipeContainerPressure_1;
    touchgfx::TextArea Presure_Text_1;
    touchgfx::TextAreaWithOneWildcard Presure_Val;
    touchgfx::CircleProgress PresureCirc_Val;
    touchgfx::PainterRGB565 PresureCirc_ValPainter;
    touchgfx::ButtonWithIcon Statistics_Button_Presure;
    touchgfx::Container SwipeContainerAmbient_1;
    touchgfx::ButtonWithIcon Statistics_Button_Ambient;
    touchgfx::TextArea Ambient_Text;
    touchgfx::TextAreaWithOneWildcard Ambient_Val;
    touchgfx::CircleProgress AmbientCirc_Val;
    touchgfx::PainterRGB565 AmbientCirc_ValPainter;
    touchgfx::Container SwipeContainerTemperature_Inside;
    touchgfx::TextAreaWithOneWildcard TempIn_Val;
    touchgfx::TextArea TempIn_Text;
    touchgfx::CircleProgress TempInCirc_Val;
    touchgfx::PainterRGB565 TempInCirc_ValPainter;
    touchgfx::ButtonWithIcon Statistics_Button_TempIn;
    touchgfx::Container SwipeContainerTemperature_Outside;
    touchgfx::TextAreaWithOneWildcard TempOut_Val;
    touchgfx::TextArea TempOut_Text;
    touchgfx::CircleProgress TempOutCirc_Val;
    touchgfx::PainterRGB565 TempOutCirc_ValPainter;
    touchgfx::ButtonWithIcon Statistics_Button_TempOut;
    touchgfx::DigitalClock digitalClock1;
    touchgfx::Box box2;
    touchgfx::Box box2_1;

    /*
     * Wildcard Buffers
     */
    static const uint16_t HUMIDITY_VAL_SIZE = 10;
    touchgfx::Unicode::UnicodeChar Humidity_ValBuffer[HUMIDITY_VAL_SIZE];
    static const uint16_t CARBON_VAL_SIZE = 2;
    touchgfx::Unicode::UnicodeChar Carbon_ValBuffer[CARBON_VAL_SIZE];
    static const uint16_t PRESURE_VAL_SIZE = 10;
    touchgfx::Unicode::UnicodeChar Presure_ValBuffer[PRESURE_VAL_SIZE];
    static const uint16_t AMBIENT_VAL_SIZE = 10;
    touchgfx::Unicode::UnicodeChar Ambient_ValBuffer[AMBIENT_VAL_SIZE];
    static const uint16_t TEMPIN_VAL_SIZE = 10;
    touchgfx::Unicode::UnicodeChar TempIn_ValBuffer[TEMPIN_VAL_SIZE];
    static const uint16_t TEMPOUT_VAL_SIZE = 10;
    touchgfx::Unicode::UnicodeChar TempOut_ValBuffer[TEMPOUT_VAL_SIZE];

private:

    /*
     * Canvas Buffer Size
     */
    static const uint32_t CANVAS_BUFFER_SIZE = 3600;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];

    /*
     * Callback Declarations
     */
    touchgfx::Callback<DefaultViewViewBase, const touchgfx::AbstractButton&> buttonCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);

};

#endif // DEFAULTVIEWVIEWBASE_HPP
