/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/defaultview_screen/DefaultViewViewBase.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

DefaultViewViewBase::DefaultViewViewBase() :
    buttonCallback(this, &DefaultViewViewBase::buttonCallbackHandler)
{
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
    
    __background.setPosition(0, 0, 240, 320);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    box1.setPosition(0, 0, 240, 320);
    box1.setColor(touchgfx::Color::getColorFromRGB(43, 43, 43));
    add(box1);

    Menu_Button.setXY(197, 7);
    Menu_Button.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_MICRO_OUTLINE_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUND_MICRO_OUTLINE_PRESSED_ID));
    Menu_Button.setLabelText(touchgfx::TypedText(T___SINGLEUSE_68EU));
    Menu_Button.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    Menu_Button.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
    Menu_Button.setAction(buttonCallback);
    add(Menu_Button);

    textArea1.setXY(20, 15);
    textArea1.setColor(touchgfx::Color::getColorFromRGB(128, 128, 128));
    textArea1.setLinespacing(0);
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_6NB9));
    add(textArea1);

    SwipeContainer.setXY(0, 53);
    SwipeContainer.setPageIndicatorBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SWIPECONTAINER_SMALL_OFF_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SWIPECONTAINER_SMALL_ON_NORMAL_ID));
    SwipeContainer.setPageIndicatorXY(108, 240);
    SwipeContainer.setSwipeCutoff(50);
    SwipeContainer.setEndSwipeElasticWidth(50);

    SwipeContainerHumidity.setWidth(240);
    SwipeContainerHumidity.setHeight(267);
    Humidity_Text.setXY(76, 23);
    Humidity_Text.setColor(touchgfx::Color::getColorFromRGB(0, 247, 255));
    Humidity_Text.setLinespacing(0);
    Humidity_Text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_XRTI));
    SwipeContainerHumidity.add(Humidity_Text);

    Humidity_Val.setXY(91, 60);
    Humidity_Val.setColor(touchgfx::Color::getColorFromRGB(0, 247, 255));
    Humidity_Val.setLinespacing(0);
    Humidity_Val.setTypedText(touchgfx::TypedText(T___SINGLEUSE_GP4Z));
    SwipeContainerHumidity.add(Humidity_Val);

    HumidityCirc_Val.setXY(65, 107);
    HumidityCirc_Val.setProgressIndicatorPosition(0, 0, 110, 110);
    HumidityCirc_Val.setRange(0, 100);
    HumidityCirc_Val.setCenter(55, 55);
    HumidityCirc_Val.setRadius(50);
    HumidityCirc_Val.setLineWidth(10);
    HumidityCirc_Val.setStartEndAngle(0, 360);
    HumidityCirc_Val.setCapPrecision(180);
    HumidityCirc_Val.setBackground(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_CIRCLEPROGRESS_BACKGROUNDS_SMALL_ID));
    HumidityCirc_ValPainter.setColor(touchgfx::Color::getColorFromRGB(0, 240, 255));
    HumidityCirc_Val.setPainter(HumidityCirc_ValPainter);
    HumidityCirc_Val.setValue(60);
    SwipeContainerHumidity.add(HumidityCirc_Val);

    SwipeContainer.add(SwipeContainerHumidity);

    SwipeContainerTemp_1.setPosition(0, 0, 240, 267);
    Temperature_Text_1.setXY(56, 23);
    Temperature_Text_1.setColor(touchgfx::Color::getColorFromRGB(0, 247, 255));
    Temperature_Text_1.setLinespacing(0);
    Temperature_Text_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_LFG7));
    SwipeContainerTemp_1.add(Temperature_Text_1);

    Temperature_Val_1.setXY(91, 60);
    Temperature_Val_1.setColor(touchgfx::Color::getColorFromRGB(0, 247, 255));
    Temperature_Val_1.setLinespacing(0);
    Temperature_Val_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_LOUF));
    SwipeContainerTemp_1.add(Temperature_Val_1);

    TempCirc_Val.setXY(65, 107);
    TempCirc_Val.setProgressIndicatorPosition(0, 0, 110, 110);
    TempCirc_Val.setRange(0, 100);
    TempCirc_Val.setCenter(55, 55);
    TempCirc_Val.setRadius(50);
    TempCirc_Val.setLineWidth(10);
    TempCirc_Val.setStartEndAngle(0, 360);
    TempCirc_Val.setCapPrecision(180);
    TempCirc_Val.setBackground(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_CIRCLEPROGRESS_BACKGROUNDS_SMALL_ID));
    TempCirc_ValPainter.setColor(touchgfx::Color::getColorFromRGB(0, 240, 255));
    TempCirc_Val.setPainter(TempCirc_ValPainter);
    TempCirc_Val.setValue(60);
    SwipeContainerTemp_1.add(TempCirc_Val);

    SwipeContainer.add(SwipeContainerTemp_1);

    SwipeContainer.setSelectedPage(0);
    add(SwipeContainer);
}

DefaultViewViewBase::~DefaultViewViewBase()
{
    touchgfx::CanvasWidgetRenderer::resetBuffer();
}

void DefaultViewViewBase::setupScreen()
{

}

void DefaultViewViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &Menu_Button)
    {
        //DropDownFunc
        //When Menu_Button clicked change screen to MenuDropdown
        //Go to MenuDropdown with no screen transition
        application().gotoMenuDropdownScreenNoTransition();
    }
}
