/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef DEFAULTVIEWVIEWBASE_HPP
#define DEFAULTVIEWVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/defaultview_screen/DefaultViewPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/ButtonWithLabel.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/containers/SwipeContainer.hpp>
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/containers/clock/DigitalClock.hpp>
#include <touchgfx/widgets/Image.hpp>

class DefaultViewViewBase : public touchgfx::View<DefaultViewPresenter>
{
public:
    DefaultViewViewBase();
    virtual ~DefaultViewViewBase();
    virtual void setupScreen();
    virtual void handleTickEvent();

    /*
     * Virtual Action Handlers
     */
    virtual void function1()
    {
        // Override and implement this function in DefaultView
    }
    virtual void Snooze_btn_pressed()
    {
        // Override and implement this function in DefaultView
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Box Backround;
    touchgfx::ButtonWithLabel Menu_Button;
    touchgfx::TextArea textArea1;
    touchgfx::SwipeContainer SwipeContainer;
    touchgfx::Container SwipeContainerHumidity;
    touchgfx::TextArea Humidity_Text;
    touchgfx::TextAreaWithOneWildcard Humidity_Val;
    touchgfx::Container SwipeContainerCarbon;
    touchgfx::TextArea Carbon_Text;
    touchgfx::TextAreaWithOneWildcard Carbon_Val;
    touchgfx::Container Preheat_msg;
    touchgfx::Box Preheat_box;
    touchgfx::TextArea Preheat_text;
    touchgfx::Container SwipeContainerPressure_1;
    touchgfx::TextArea Presure_Text;
    touchgfx::TextAreaWithOneWildcard Presure_Val;
    touchgfx::Container SwipeContainerAmbient_1;
    touchgfx::TextArea Ambient_Text;
    touchgfx::TextAreaWithOneWildcard Ambient_Val;
    touchgfx::Container SwipeContainerTemperature_Inside;
    touchgfx::TextAreaWithOneWildcard TempIn_Val;
    touchgfx::TextArea TempIn_Text;
    touchgfx::Container SwipeContainerTemperature_Outside;
    touchgfx::TextAreaWithOneWildcard TempOut_Val;
    touchgfx::TextArea TempOut_Text;
    touchgfx::DigitalClock digitalClock1;
    touchgfx::Box Header;
    touchgfx::Box Footer;
    touchgfx::Container Alert_cover;
    touchgfx::Box Backround_1;
    touchgfx::Box Error_msg_backround;
    touchgfx::Image Error;
    touchgfx::TextAreaWithOneWildcard Error_code;
    touchgfx::ButtonWithLabel Snooze_button;
    touchgfx::TextAreaWithOneWildcard Error_text;
    touchgfx::Box Brightness_level;

    /*
     * Wildcard Buffers
     */
    static const uint16_t HUMIDITY_VAL_SIZE = 10;
    touchgfx::Unicode::UnicodeChar Humidity_ValBuffer[HUMIDITY_VAL_SIZE];
    static const uint16_t CARBON_VAL_SIZE = 20;
    touchgfx::Unicode::UnicodeChar Carbon_ValBuffer[CARBON_VAL_SIZE];
    static const uint16_t PRESURE_VAL_SIZE = 10;
    touchgfx::Unicode::UnicodeChar Presure_ValBuffer[PRESURE_VAL_SIZE];
    static const uint16_t AMBIENT_VAL_SIZE = 10;
    touchgfx::Unicode::UnicodeChar Ambient_ValBuffer[AMBIENT_VAL_SIZE];
    static const uint16_t TEMPIN_VAL_SIZE = 10;
    touchgfx::Unicode::UnicodeChar TempIn_ValBuffer[TEMPIN_VAL_SIZE];
    static const uint16_t TEMPOUT_VAL_SIZE = 10;
    touchgfx::Unicode::UnicodeChar TempOut_ValBuffer[TEMPOUT_VAL_SIZE];
    static const uint16_t ERROR_CODE_SIZE = 10;
    touchgfx::Unicode::UnicodeChar Error_codeBuffer[ERROR_CODE_SIZE];
    static const uint16_t ERROR_TEXT_SIZE = 50;
    touchgfx::Unicode::UnicodeChar Error_textBuffer[ERROR_TEXT_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<DefaultViewViewBase, const touchgfx::AbstractButton&> buttonCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);

};

#endif // DEFAULTVIEWVIEWBASE_HPP
