/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef FRONTENDHEAPBASE_HPP
#define FRONTENDHEAPBASE_HPP

#include <common/Meta.hpp>
#include <common/Partition.hpp>
#include <mvp/MVPHeap.hpp>

#include <touchgfx/transitions/NoTransition.hpp>
#include <gui/common/FrontendApplication.hpp>
#include <gui/model/Model.hpp>

#include <gui/defaultview_screen/DefaultViewView.hpp>
#include <gui/defaultview_screen/DefaultViewPresenter.hpp>
#include <gui/menudropdown_1_screen/MenuDropdown_1View.hpp>
#include <gui/menudropdown_1_screen/MenuDropdown_1Presenter.hpp>
#include <gui/about_screen/AboutView.hpp>
#include <gui/about_screen/AboutPresenter.hpp>
#include <gui/time_settings_screen/Time_SettingsView.hpp>
#include <gui/time_settings_screen/Time_SettingsPresenter.hpp>
#include <gui/date_settings_screen/Date_SettingsView.hpp>
#include <gui/date_settings_screen/Date_SettingsPresenter.hpp>
#include <gui/statistics_temperature_inside_screen/Statistics_Temperature_InsideView.hpp>
#include <gui/statistics_temperature_inside_screen/Statistics_Temperature_InsidePresenter.hpp>
#include <gui/statistics_temperature_outside_screen/Statistics_Temperature_OutsideView.hpp>
#include <gui/statistics_temperature_outside_screen/Statistics_Temperature_OutsidePresenter.hpp>
#include <gui/statistics_humidity_screen/Statistics_HumidityView.hpp>
#include <gui/statistics_humidity_screen/Statistics_HumidityPresenter.hpp>
#include <gui/statistics_presure_screen/Statistics_PresureView.hpp>
#include <gui/statistics_presure_screen/Statistics_PresurePresenter.hpp>
#include <gui/statistics_ambient_1_screen/Statistics_Ambient_1View.hpp>
#include <gui/statistics_ambient_1_screen/Statistics_Ambient_1Presenter.hpp>
#include <gui/statistics_gas_sensor_screen/Statistics_Gas_sensorView.hpp>
#include <gui/statistics_gas_sensor_screen/Statistics_Gas_sensorPresenter.hpp>
#include <gui/alarm_settings_screen/Alarm_SettingsView.hpp>
#include <gui/alarm_settings_screen/Alarm_SettingsPresenter.hpp>
#include <gui/averages_screen/AVERAGESView.hpp>
#include <gui/averages_screen/AVERAGESPresenter.hpp>
#include <gui/statistics_screen/STATISTICSView.hpp>
#include <gui/statistics_screen/STATISTICSPresenter.hpp>
#include <gui/average_ambientlight_screen/Average_AmbientLightView.hpp>
#include <gui/average_ambientlight_screen/Average_AmbientLightPresenter.hpp>
#include <gui/average_gas_screen/Average_GasView.hpp>
#include <gui/average_gas_screen/Average_GasPresenter.hpp>
#include <gui/average_pressure_screen/Average_PressureView.hpp>
#include <gui/average_pressure_screen/Average_PressurePresenter.hpp>
#include <gui/average_humidity_screen/Average_HumidityView.hpp>
#include <gui/average_humidity_screen/Average_HumidityPresenter.hpp>
#include <gui/average_tempout_screen/Average_TempOUTView.hpp>
#include <gui/average_tempout_screen/Average_TempOUTPresenter.hpp>
#include <gui/average_tempin_screen/Average_TempINView.hpp>
#include <gui/average_tempin_screen/Average_TempINPresenter.hpp>


/**
 * This class provides the memory that shall be used for memory allocations
 * in the frontend. A single instance of the FrontendHeap is allocated once (in heap
 * memory), and all other frontend objects such as views, presenters and data model are
 * allocated within the scope of this FrontendHeap. As such, the RAM usage of the entire
 * user interface is sizeof(FrontendHeap).
 *
 * @note The FrontendHeap reserves memory for the most memory-consuming presenter and
 * view only. The largest of these classes are determined at compile-time using template
 * magic. As such, it is important to add all presenters, views and transitions to the
 * type lists in this class.
 *
 */
class FrontendHeapBase : public touchgfx::MVPHeap
{
public:
    /**
     * A list of all view types. Must end with meta::Nil.
     * @note All view types used in the application MUST be added to this list!
     */
    typedef touchgfx::meta::TypeList< DefaultViewView,
            touchgfx::meta::TypeList< MenuDropdown_1View,
            touchgfx::meta::TypeList< AboutView,
            touchgfx::meta::TypeList< Time_SettingsView,
            touchgfx::meta::TypeList< Date_SettingsView,
            touchgfx::meta::TypeList< Statistics_Temperature_InsideView,
            touchgfx::meta::TypeList< Statistics_Temperature_OutsideView,
            touchgfx::meta::TypeList< Statistics_HumidityView,
            touchgfx::meta::TypeList< Statistics_PresureView,
            touchgfx::meta::TypeList< Statistics_Ambient_1View,
            touchgfx::meta::TypeList< Statistics_Gas_sensorView,
            touchgfx::meta::TypeList< Alarm_SettingsView,
            touchgfx::meta::TypeList< AVERAGESView,
            touchgfx::meta::TypeList< STATISTICSView,
            touchgfx::meta::TypeList< Average_AmbientLightView,
            touchgfx::meta::TypeList< Average_GasView,
            touchgfx::meta::TypeList< Average_PressureView,
            touchgfx::meta::TypeList< Average_HumidityView,
            touchgfx::meta::TypeList< Average_TempOUTView,
            touchgfx::meta::TypeList< Average_TempINView,
            touchgfx::meta::Nil > > > > > > > > > > > > > > > > > > >
            > GeneratedViewTypes;

    /**
     * Determine (compile time) the View type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedViewTypes >::type MaxGeneratedViewType;

    /**
     * A list of all presenter types. Must end with meta::Nil.
     * @note All presenter types used in the application MUST be added to this list!
     */
    typedef touchgfx::meta::TypeList< DefaultViewPresenter,
            touchgfx::meta::TypeList< MenuDropdown_1Presenter,
            touchgfx::meta::TypeList< AboutPresenter,
            touchgfx::meta::TypeList< Time_SettingsPresenter,
            touchgfx::meta::TypeList< Date_SettingsPresenter,
            touchgfx::meta::TypeList< Statistics_Temperature_InsidePresenter,
            touchgfx::meta::TypeList< Statistics_Temperature_OutsidePresenter,
            touchgfx::meta::TypeList< Statistics_HumidityPresenter,
            touchgfx::meta::TypeList< Statistics_PresurePresenter,
            touchgfx::meta::TypeList< Statistics_Ambient_1Presenter,
            touchgfx::meta::TypeList< Statistics_Gas_sensorPresenter,
            touchgfx::meta::TypeList< Alarm_SettingsPresenter,
            touchgfx::meta::TypeList< AVERAGESPresenter,
            touchgfx::meta::TypeList< STATISTICSPresenter,
            touchgfx::meta::TypeList< Average_AmbientLightPresenter,
            touchgfx::meta::TypeList< Average_GasPresenter,
            touchgfx::meta::TypeList< Average_PressurePresenter,
            touchgfx::meta::TypeList< Average_HumidityPresenter,
            touchgfx::meta::TypeList< Average_TempOUTPresenter,
            touchgfx::meta::TypeList< Average_TempINPresenter,
            touchgfx::meta::Nil > > > > > > > > > > > > > > > > > > >
            > GeneratedPresenterTypes;

    /**
     * Determine (compile time) the Presenter type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedPresenterTypes >::type MaxGeneratedPresenterType;

    /**
     * A list of all transition types. Must end with meta::Nil.
     * @note All transition types used in the application MUST be added to this list!
     */
    typedef touchgfx::meta::TypeList< touchgfx::NoTransition,
            touchgfx::meta::Nil
            > GeneratedTransitionTypes;

    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoDefaultViewScreenNoTransition();
    }
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
        : MVPHeap(presenters, views, transitions, app)
    {

    }

};

#endif // FRONTENDHEAPBASE_HPP
